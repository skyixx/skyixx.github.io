import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t}from"./app-a7e5bcc2.js";const e={},p=t(`<h1 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h1><ul><li><p>声明方法</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;hi,rust!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">function_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">function_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    functiom_body<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>函数参数:</p><ol><li>形参(parameters)</li><li>实参(arguments)</li><li>在函数签名里,必须声明每个参数的类型,有多个参数时,每个参数的类型必须单独指明<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">function</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实参</span>
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">function</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//形参</span>
    <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;The x is {}, the y is {}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ul><h2 id="函数体中的语句与表达式" tabindex="-1"><a class="header-anchor" href="#函数体中的语句与表达式" aria-hidden="true">#</a> 函数体中的语句与表达式</h2><ul><li><p>语句: 执行一些动作的指令(动作),没有返回值(返回值为<code>&#39;()&#39;</code>)</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">//一个例子</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个例子就是一个语句,<code>let x = 5 + 6;</code>是一个语句,而<code>5 + 6</code>则是一个表达式</p></li><li><p>表达式: 计算产生的值(求值),有返回值</p></li></ul>`,4),i=[p];function o(c,l){return s(),a("div",null,i)}const r=n(e,[["render",o],["__file","函数.html.vue"]]);export{r as default};

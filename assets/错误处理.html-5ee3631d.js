import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-a7e5bcc2.js";const t={},p=e(`<h1 id="错误的分类" tabindex="-1"><a class="header-anchor" href="#错误的分类" aria-hidden="true">#</a> 错误的分类</h1><ul><li>可恢复 <ul><li>列如文件未找到，可再次尝试</li><li>应对机制：<code>Result&lt;T, E&gt;</code></li></ul></li><li>不可恢复 <ul><li>Bug，列如访问的索引超出范围</li><li>应对机制：<code>panic!</code> 程序立即终止执行</li></ul></li></ul><h1 id="panic-不可恢复的错误" tabindex="-1"><a class="header-anchor" href="#panic-不可恢复的错误" aria-hidden="true">#</a> panic! - 不可恢复的错误</h1><ul><li>当 panic!执行时 <ul><li>程序答应错误信息</li><li>展开，清理调用栈 <ol><li>Rust 会展开调用栈（工作量大） <ul><li>Rust 沿着调用栈往回走</li><li>清理每个遇到的的函数的数据</li></ul></li><li>立即终止调用栈 <ul><li>不进行清理，直接停止程序</li><li>内存需要操作系统清理</li><li></li></ul></li></ol><ul><li>想让二进制文件更小可以把展开设置为终止<br> 在 Cargo.toml 中设置<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[profile.release]
panic = &#39;abort&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li>退出程序</li></ul></li></ul><h1 id="result-枚举" tabindex="-1"><a class="header-anchor" href="#result-枚举" aria-hidden="true">#</a> Result 枚举</h1><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token constant">OK</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token constant">ERR</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>example</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token keyword">match</span> f <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> file<span class="token punctuation">,</span>
        <span class="token class-name">Err</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;open file error {:#?}&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:#?}&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在该例中，<code>File::open(&quot;hello.world&quot;)</code>的返回值有<code>Ok(T)</code>和<code>Err(E)</code>,其中 T 是我们需要的文件对象</p></li></ul><h1 id="何时使用-panic" tabindex="-1"><a class="header-anchor" href="#何时使用-panic" aria-hidden="true">#</a> 何时使用 panic!</h1><ul><li>演示 unwrap</li><li>原型代码 unwrap, expect</li><li>测试 ubwrap, expect</li><li>有时你确定 Result 的返回就是 Ok: 使用 unwrap<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>net<span class="token punctuation">::</span></span><span class="token class-name">IpAddr</span><span class="token punctuation">;</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//你可以确定该字符可以被成功转化为ip地址,但是parse()会返回Result类型,所以编译器任然认为可能出现panic!</span>
<span class="token keyword">let</span> ip<span class="token punctuation">:</span> <span class="token class-name">IpAddr</span> <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,9),l=[p];function i(c,o){return s(),a("div",null,l)}const d=n(t,[["render",i],["__file","错误处理.html.vue"]]);export{d as default};

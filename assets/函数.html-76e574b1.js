const n=JSON.parse('{"key":"v-10249919","path":"/Notebook/Rust/%E5%87%BD%E6%95%B0.html","title":"函数","lang":"zh-CN","frontmatter":{"title":"函数","category":["笔记","Rust"],"description":"函数 声明方法 fn main(){ print!(\\"hi,rust!\\"); function_name(); } fn function_name(){ functiom_body; } 函数参数: 形参(parameters) 实参(arguments) 在函数签名里,必须声明每个参数的类型,有多个参数时,每个参数的类型必须单独指明fn main(){ function(5, 6);//实参 } fn function(x: i32, y: u32){//形参 print!(\\"The x is {}, the y is {}\\", x, y); }","head":[["meta",{"property":"og:url","content":"https://skyixx.github.io/Notebook/Rust/%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"ColorSky"}],["meta",{"property":"og:title","content":"函数"}],["meta",{"property":"og:description","content":"函数 声明方法 fn main(){ print!(\\"hi,rust!\\"); function_name(); } fn function_name(){ functiom_body; } 函数参数: 形参(parameters) 实参(arguments) 在函数签名里,必须声明每个参数的类型,有多个参数时,每个参数的类型必须单独指明fn main(){ function(5, 6);//实参 } fn function(x: i32, y: u32){//形参 print!(\\"The x is {}, the y is {}\\", x, y); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-29T06:38:08.000Z"}],["meta",{"property":"article:author","content":"ColorSky"}],["meta",{"property":"article:modified_time","content":"2023-08-29T06:38:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-29T06:38:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ColorSky\\",\\"url\\":\\"https://ColorSky.fun\\"}]}"]]},"headers":[{"level":2,"title":"函数体中的语句与表达式","slug":"函数体中的语句与表达式","link":"#函数体中的语句与表达式","children":[]}],"git":{"createdTime":1691998057000,"updatedTime":1693291088000,"contributors":[{"name":"skyixx","email":"ningstars@outlook.com","commits":5}]},"readingTime":{"minutes":0.63,"words":188},"filePathRelative":"Notebook/Rust/函数.md","localizedDate":"2023年8月14日","excerpt":"<h1> 函数</h1>\\n<ul>\\n<li>\\n<p>声明方法</p>\\n<div class=\\"language-rust line-numbers-mode\\" data-ext=\\"rs\\"><pre class=\\"language-rust\\"><code><span class=\\"token keyword\\">fn</span> <span class=\\"token function-definition function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token macro property\\">print!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"hi,rust!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">function_name</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">fn</span> <span class=\\"token function-definition function\\">function_name</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    functiom_body<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>函数参数:</p>\\n<ol>\\n<li>形参(parameters)</li>\\n<li>实参(arguments)</li>\\n<li>在函数签名里,必须声明每个参数的类型,有多个参数时,每个参数的类型必须单独指明<div class=\\"language-rust line-numbers-mode\\" data-ext=\\"rs\\"><pre class=\\"language-rust\\"><code><span class=\\"token keyword\\">fn</span> <span class=\\"token function-definition function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//实参</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">fn</span> <span class=\\"token function-definition function\\">function</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">:</span> <span class=\\"token keyword\\">i32</span><span class=\\"token punctuation\\">,</span> y<span class=\\"token punctuation\\">:</span> <span class=\\"token keyword\\">u32</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token comment\\">//形参</span>\\n    <span class=\\"token macro property\\">print!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"The x is {}, the y is {}\\"</span><span class=\\"token punctuation\\">,</span> x<span class=\\"token punctuation\\">,</span> y<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ol>\\n</li>\\n</ul>","autoDesc":true}');export{n as data};

import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t}from"./app-a7e5bcc2.js";const e={},i=t(`<h1 id="什么是-trait" tabindex="-1"><a class="header-anchor" href="#什么是-trait" aria-hidden="true">#</a> 什么是 Trait?</h1><ul><li>Trait 告诉编译器: 某种类型具有那些功能</li><li>Trait 抽象地定义共享行为</li><li>Trait bounds(约束): 泛型类型参数指定为实现特定行为的类型</li><li>like 接口</li></ul><h1 id="定义-trait" tabindex="-1"><a class="header-anchor" href="#定义-trait" aria-hidden="true">#</a> 定义 Trait</h1><ul><li>把方法签名放在一起,来实现某种目的所必须的一组行为</li><li>关键字: <code>trait</code></li><li>只有方法签名,没有具体实现</li><li>trait 可以有多个方法,以<code>;</code>结尾</li><li>实现该 trait 的类型必须提供具体的方法实现</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">//一个trait的定义</span>
<span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Summary</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span> <span class="token comment">// 没有方法体</span>
    <span class="token comment">/*fn summarize1(&amp;self) -&gt; String;*/</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="在类型上实现-trait" tabindex="-1"><a class="header-anchor" href="#在类型上实现-trait" aria-hidden="true">#</a> 在类型上实现 trait</h1><ul><li>与为类型实现方法类似</li><li>不同之处在于<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">TraitName</span> <span class="token keyword">for</span> <span class="token class-name">TypeName</span> <span class="token punctuation">{</span><span class="token comment">/* --snip-- */</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>在 impl 的块里面,需要对 Trait 里的方法签名进行具体的实现</li></ul><h1 id="实现-trait-的约束" tabindex="-1"><a class="header-anchor" href="#实现-trait-的约束" aria-hidden="true">#</a> 实现 Trait 的约束</h1><ul><li>可以在某个类型上实现某个 trait 的前提条件是: <ul><li>这个类型或这个 trait 是本地 crate 定义的</li></ul></li><li>无法为外部类型实现外部 trait <ul><li>限制程序属性的一部分(一致性)</li><li>孤儿规则</li><li>此规则确保其他人不能破坏你的代码,反之亦然</li></ul></li><li>默认实现</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Summary</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">summarise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
        <span class="token comment">//可以写出方法的具体实现</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>默认实现可以调用 trait 中其他的方法(尽管未实现)</li><li>无法在重写实现调用默认实现</li></ul><h1 id="trait-作为参数" tabindex="-1"><a class="header-anchor" href="#trait-作为参数" aria-hidden="true">#</a> Trait 作为参数</h1><ul><li><code>impl Trait</code> 语法: 适用于简单情况</li></ul><p>将实现 Trait 的类型作为参数</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">TraitName</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">_nu_</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token type-definition class-name">TypeName</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">TraitName</span> <span class="token keyword">for</span> <span class="token class-name">TypeName</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">_nu_</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
        <span class="token comment">//--snip--</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">impl</span> <span class="token class-name">TraitName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Trait bound</code>语法: 可用于复杂情况</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">TraitName</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>使用<code>+</code>指定多个<code>Trait bound</code></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">impl</span> <span class="token class-name">Trait1</span> <span class="token operator">+</span> <span class="token class-name">Trait2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//要求item实现Trait1和Trait2这两个trait</span>
<span class="token comment">// also</span>
<span class="token keyword">fn</span> <span class="token function-definition function">notify1</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Trait1</span> <span class="token operator">+</span> <span class="token class-name">Trait2</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用<code>where</code>子句简化</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token class-name">U</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span>
<span class="token keyword">where</span> <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Trait1</span> <span class="token operator">+</span> <span class="token class-name">Traia2</span><span class="token punctuation">,</span>
      <span class="token class-name">U</span><span class="token punctuation">:</span> <span class="token class-name">Trait2</span> <span class="token operator">+</span> <span class="token class-name">Trait3</span><span class="token punctuation">,</span>
<span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>实现 Trait 作为返回类型 <ul><li><code>impl Trait</code><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">impl</span> <span class="token class-name">Trait</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>注意,反会类型只能是同一种类型!而不应该是多种实现 Trait 的类型</li></ul></li></ul>`,22),p=[i];function l(c,o){return s(),a("div",null,p)}const d=n(e,[["render",l],["__file","Trait.html.vue"]]);export{d as default};

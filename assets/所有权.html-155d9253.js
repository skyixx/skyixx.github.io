import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as n,a as e}from"./app-a7e5bcc2.js";const l={},i=e(`<h1 id="栈内存-stack-堆内存-heap" tabindex="-1"><a class="header-anchor" href="#栈内存-stack-堆内存-heap" aria-hidden="true">#</a> 栈内存(Stack) &amp; 堆内存(Heap)</h1><ul><li><p>Stack 按值的接受顺序来储存,按相反的顺序将它们移除(后进先出 LIFO,LastIn FirstOut)</p><ul><li>添加数据叫做压入栈(压栈)</li><li>移除数据叫做弹出栈(出栈)</li></ul></li><li><p>所有储存在 Stack 上的出局必须拥有固定一致的大小</p><ul><li>编译时大小未知的数据或运行时大小可能发生改变的数据必须存放在 Heap 上</li></ul></li><li><p>Heap 内存组织性差一些</p><ul><li>当数据放入 Heap 时,程序将请求一定数量的空间</li><li>操作系统在 Heap 里找到一块足够大的空间,把它标记为<code>在用</code>,并返回一个指针,也就是这个内存的空间地址</li><li>这个过程叫做在 Heap 上进行分配,有时仅仅称之为<code>分配</code></li></ul></li><li><p>存储数据</p><ul><li>把值压到 Stack 上不叫分配</li><li>指针是已知固定大小,可以把指针存放在 Stack 上 <ul><li>But,如果想访问实际数据,则必须使用指针进行定位</li></ul></li><li>把数据放到 Stack 上比放在 Heap 上要快得多,因为操作系统不需要寻找用来储存数据的空间,那个位置永远在 Stack 的顶端</li></ul></li><li><p>访问数据</p><ul><li>访问 Heap 中的数据要比访问 Stack 中的数据慢,因为需要用过指针才能找到 heap 中的数据。对于现代的处理器来说,指令在内存跳转的次数越少,,熟读就越快</li><li>如果数据放的距离比较近,那么处理速度就会快一些(Stack 上)</li><li>如果数据放的距离比较远,那么处理速度就会慢一些(Heap 上)</li></ul></li><li><p>函数调用: 当你的代码调用函数时,值被传入函数(也包括指向 heap 的指针). 函数本地的变量被压到 Stack 上. 当函数结束后,这些值会从 Stack 上弹出</p></li></ul><h1 id="所有权" tabindex="-1"><a class="header-anchor" href="#所有权" aria-hidden="true">#</a> 所有权</h1><ul><li><p>所有权解决的问题:</p><ol><li>跟踪代码哪些部分正在使用 heap 的哪些数据</li><li>最小化 heap 上的重复数据量</li><li>清理 heap 上未使用的数据以避免空间不足</li></ol></li><li><p>使用所有权不需要去担心 Stack 和 Heap</p></li><li><p>管理 Heap 数据是所有权存在的原因</p></li></ul><h2 id="所有权规则" tabindex="-1"><a class="header-anchor" href="#所有权规则" aria-hidden="true">#</a> 所有权规则</h2><ol><li>每个值都有一个变量, 这个变量是该值的所有者</li><li>每个值同时只能有一个所有者</li><li>当所有者超出作用域(Scope)时, 该值将被删除</li></ol><h3 id="变量作用域" tabindex="-1"><a class="header-anchor" href="#变量作用域" aria-hidden="true">#</a> 变量作用域</h3><ul><li>作用域(Scope)是程序中一个项目的有效范围(以声明开始,以<code>}</code>结束)</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//s不可用</span>
    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">//s可用</span>
                <span class="token comment">//可以对s进行操作</span>
<span class="token punctuation">}</span><span class="token comment">//s的作用域到此结束</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内存分配" tabindex="-1"><a class="header-anchor" href="#内存分配" aria-hidden="true">#</a> 内存分配</h2><ul><li>当变量走出作用域时,内存会立即自动交还给操作系统</li><li>Drop 函数</li></ul><h2 id="变量数据交互的方式" tabindex="-1"><a class="header-anchor" href="#变量数据交互的方式" aria-hidden="true">#</a> 变量数据交互的方式</h2><ol><li>Move 移交 <ul><li>move 会将所有权移交（位于堆上的数据）<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">;</span> <span class="token comment">//此时s1的数据移动到了s2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li>clone 克隆 <ul><li>在堆上的数据</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在栈上的数据</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>- 整形实现了\`copy trait\`: 一个旧的变量将其值赋值给新变量后任然可用
</code></pre></li></ol>`,13),t=[i];function p(c,o){return s(),n("div",null,t)}const d=a(l,[["render",p],["__file","所有权.html.vue"]]);export{d as default};
